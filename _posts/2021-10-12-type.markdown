---
layout: post
title: JavaScript类型判断
date: 2021-10-12 21:15:00 +0800
description: JavaScript类型判断总结
tags: [javascript, js, nodeJs]
---

### JavaScript类型罗列

+ 基本类型：Number、String、Boolean、Undefined、Null、Symbol、BigInt
+ 引用类型：Function、Array、Object、Date、RegExp



### 创建类型

```
var fn = function () {}
var number = 1
var str = '1'
var arr = []
var obj = {}
var boolean = true
var undef
var nu = null
var symbol = Symbol()
var big = 9007199254740995n
var day = new Date()
var regExp = new RegExp(/[a-z]/)
```



### typeof判断类型（运行结果看控制台）

```
console.log('typeof number:', typeof number)
console.log('typeof str:', typeof str)
console.log('typeof fn:', typeof fn)
console.log('typeof arr:', typeof arr)
console.log('typeof obj:', typeof obj)
console.log('typeof boolean:', typeof boolean)
console.log('typeof undef:', typeof undef)
console.log('typeof nu:', typeof nu)
console.log('typeof symbol:', typeof symbol)
console.log('typeof big:', typeof big)
console.log('typeof day:', typeof day)
console.log('typeof regExp:', typeof regExp)
```



### Object.prototype.toString.call判断类型（运行结果看控制台）

```
console.log('Object.prototype.toString.call(number):', Object.prototype.toString.call(number))
console.log('Object.prototype.toString.call(str):', Object.prototype.toString.call(str))
console.log('Object.prototype.toString.call(fn):', Object.prototype.toString.call(fn))
console.log('Object.prototype.toString.call(arr):', Object.prototype.toString.call(arr))
console.log('Object.prototype.toString.call(obj):', Object.prototype.toString.call(obj))
console.log('Object.prototype.toString.call(boolean):', Object.prototype.toString.call(boolean))
console.log('Object.prototype.toString.call(undef):', Object.prototype.toString.call(undef))
console.log('Object.prototype.toString.call(nu):', Object.prototype.toString.call(nu))
console.log('Object.prototype.toString.call(symbol):', Object.prototype.toString.call(symbol))
console.log('Object.prototype.toString.call(big):', Object.prototype.toString.call(big))
console.log('Object.prototype.toString.call(day):', Object.prototype.toString.call(day))
console.log('Object.prototype.toString.call(regExp):', Object.prototype.toString.call(regExp))
```



### constructor判断类型（运行结果看控制台）

```
console.log('number.constructor:', number.constructor)
console.log('str.constructor:', str.constructor)
console.log('fn.constructor:', fn.constructor)
console.log('arr.constructor:', arr.constructor)
console.log('obj.constructor:', obj.constructor)
console.log('boolean.constructor:', boolean.constructor)
// console.log('undef.constructor:', undef.constructor)
// console.log('nu.constructor:', nu.constructor)
console.log('symbol.constructor:', symbol.constructor)
console.log('big.constructor:', big.constructor)
console.log('day.constructor:', day.constructor)
console.log('regExp.constructor:', regExp.constructor)
```



### 鸭子类型

long long ago, 在JS王国里，有一个国王，他觉得世界上最美妙的声音就是鸭子的叫声，于是国王召集大臣，要组建一个1000只鸭子组成的合唱团。大臣们找遍了全国，终于找到999只鸭子，但是始终还差一只，最后大臣发现有一只非常特别的鸡，它的叫声跟鸭子一模一样，于是这只鸡就成为了合唱团的最后一员。
鸭子类型，“如果它走起来像鸭子，而且叫起来像鸭子，那么它就是鸭子”。



### 总结

+ typeof可以判断区分基本类型，null是个例外
+ Object.prototype.toString.call可以区分所有类型
+ instanceof可以判断引用类型
+ constructor除了undefined和null报错外可以去区分他的类型
+ 问题：Number类型下的NaN和Infinity怎么判断

<script type="text/javascript">
var fn = function () {}
var number = 1
var str = '1'
var arr = []
var obj = {}
var boolean = true
var undef
var nu = null
var symbol = Symbol()
var big = 9007199254740995n
var day = new Date()
var regExp = new RegExp(/[a-z]/)

console.log('typeof number:', typeof number)
console.log('typeof str:', typeof str)
console.log('typeof fn:', typeof fn)
console.log('typeof arr:', typeof arr)
console.log('typeof obj:', typeof obj)
console.log('typeof boolean:', typeof boolean)
console.log('typeof undef:', typeof undef)
console.log('typeof nu:', typeof nu)
console.log('typeof symbol:', typeof symbol)
console.log('typeof big:', typeof big)
console.log('typeof day:', typeof day)
console.log('typeof regExp:', typeof regExp)

console.log('Object.prototype.toString.call(number):', Object.prototype.toString.call(number))
console.log('Object.prototype.toString.call(str):', Object.prototype.toString.call(str))
console.log('Object.prototype.toString.call(fn):', Object.prototype.toString.call(fn))
console.log('Object.prototype.toString.call(arr):', Object.prototype.toString.call(arr))
console.log('Object.prototype.toString.call(obj):', Object.prototype.toString.call(obj))
console.log('Object.prototype.toString.call(boolean):', Object.prototype.toString.call(boolean))
console.log('Object.prototype.toString.call(undef):', Object.prototype.toString.call(undef))
console.log('Object.prototype.toString.call(nu):', Object.prototype.toString.call(nu))
console.log('Object.prototype.toString.call(symbol):', Object.prototype.toString.call(symbol))
console.log('Object.prototype.toString.call(big):', Object.prototype.toString.call(big))
console.log('Object.prototype.toString.call(day):', Object.prototype.toString.call(day))
console.log('Object.prototype.toString.call(regExp):', Object.prototype.toString.call(regExp))

console.log('number instanceof Number:', number instanceof Number)
console.log('str instanceof String:', str instanceof String)
console.log('fn instanceof Function:', fn instanceof Function)
console.log('arr instanceof Array:', arr instanceof Array)
console.log('obj instanceof Object:', obj instanceof Object)
console.log('boolean instanceof Boolean:', boolean instanceof Boolean)
console.log('undef instanceof undefined:', undef instanceof Object)
console.log('nu instanceof Null:', nu instanceof Object)
console.log('symbol instanceof Symbol:', symbol instanceof Symbol)
console.log('big instanceof BigInt:', big instanceof BigInt)
console.log('day instanceof Date:', day instanceof Date)
console.log('regExp instanceof RegExp:', regExp instanceof RegExp)

console.log('number.constructor:', number.constructor)
console.log('str.constructor:', str.constructor)
console.log('fn.constructor:', fn.constructor)
console.log('arr.constructor:', arr.constructor)
console.log('obj.constructor:', obj.constructor)
console.log('boolean.constructor:', boolean.constructor)
// console.log('undef.constructor:', undef.constructor)
// console.log('nu.constructor:', nu.constructor)
console.log('symbol.constructor:', symbol.constructor)
console.log('big.constructor:', big.constructor)
console.log('day.constructor:', day.constructor)
console.log('regExp.constructor:', regExp.constructor)
</script>
